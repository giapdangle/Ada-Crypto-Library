with AUnit.Assertions; 
with Crypto.Types.Big_Numbers;
with Ada.Text_IO; 
with Crypto.Symmetric.Hashfunction_SHA1;

pragma Elaborate_All(Crypto.Types.Big_Numbers);
pragma Optimize(Time);

package body Test.Big_Numbers_Utils is

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
-------------------------------- Type - Declaration --------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

   package Big is new Crypto.Types.Big_Numbers(4096);
   use Big;
   use Crypto.Types;
   use Big.Utils;
    
   A, H, P, Q, R, Z: Big_Unsigned;
   Str: String := Integer'Image(1);
   Str1: String := Integer'Image(99);
   Str2: String := Integer'Image(100);
   Str3: String := Integer'Image(1000);
   J : Integer;
   B1: Bytes(0 .. 7);
   B2: Bytes(0 .. 511);
   B3: Bytes(0 .. 106);

   M1: Words(0 .. 127);
   M2: Words(0 .. 32);
   M3: Words(0 .. 32);
   S1, S2: String (1 .. 1234);
   S3, S4: String (1 .. 309);
   M4, M5: Word;
   
   X_851: constant Big_Unsigned := To_Big_Unsigned("10000000000000000000000000000000000" &
	"00000000000000000000000000000000000000000000000000000000000000000000000000" &
	"00000000000000000000000000000000000000000000000000000000000000000000000000" &
	"00000000000000000000000000000000000000000000000000000000000000000000000000");

   Y_1024: constant Big_Unsigned := To_Big_Unsigned("1797693134862315907729305190789024733" &
	"61797697894230657273430081157732675805500963132708477322407536021120113879871" &
	"39335765878976881441662249284743063947412437776789342486548527630221960124609" &
	"41194530829520850057688381506823424628814739131105408272371633505106845862982" &
	"39947245938479716304835356329624224137216");

    -- X := 2^4096 - 1
   X: constant Big_Unsigned := To_Big_Unsigned("10443888814131525066" 					   &
	"9175271071662438257996424904738378038423348328395390797155745684882681193499" &
	"7558340890106714439262837987573438185793607263236087851365277945956976543709" &
	"9983403615901343837183144280700118559462263763188393977127456723346843445866" &
	"1749680790870580370407128404874011860911446797778359802900668693897688178778" &
	"5946905630190260940599579453432823469303026696443059025015972399867714215541" &
	"6938355598852914863182379144344967340878118726394964751001890413490084170616" &
	"7509366833385055103297208826955076998361636941193301521379682583718809183365" &
	"6751221318492846368125550225998300412344784862595674492194617023806505913245" &
	"6108257318353800876086221028342701976982023131690176780066751954850799216364" &
	"1937028537512478401490715913545998279051339961155179427110683113409058427288" &
	"4279791554849782954323534517065223269061394905987693002122963395687782878948" &
	"4406160074129456749198230505716423771548163213806310459029161369267083428564" &
	"4073044789997190178146576347322385026725305989979599609079946920177462481771" &
	"8449867455659250178329070473119433165550807568221846571746373296884912819520" &
        "3174570024409266169108741483850784119298045229818573389776481031260859030013" &
	"02413467189726673216491511131602920781738033436090243804708340403154190335");
	
   S : constant Integer := Length_In_Bytes(X);
   B : Bytes(0 .. S - 1 );
   
   T :  constant Integer := Bit_Length(X)/32; 
   M : Words(0 .. T - 1);
	

------------------------------------------------------------------------------------
---------------------------- Register Big_Number Test 1 ----------------------------
------------------------------------------------------------------------------------
	
   procedure Register_Tests(T : in out Big_Number_Test) is
      use Test_Cases.Registration;
   begin
      Register_Routine(T, Big_Number_Test_Rotate_Left'Access,"Big_Number_Test10.");
      Register_Routine(T, Big_Number_Test_Rotate_Right'Access,"Big_Number_Test11.");
      Register_Routine(T, Big_Number_Test_Random'Access,"Big_Number_Test12.");
      Register_Routine(T, Big_Number_Test_Bit_Length'Access,"Big_Number_Test13.");
      Register_Routine(T, Big_Number_Test_LSB'Access,"Big_Number_Test14.");
      Register_Routine(T, Big_Number_Test_Length_In_Bytes'Access,"Big_Number_Test15.");
      Register_Routine(T, Big_Number_Test_Gcd'Access,"Big_Number_Test16.");
      Register_Routine(T, Big_Number_Test_To_Bytes'Access,"Big_Number_Test17.");
      Register_Routine(T, Big_Number_Test_To_Mod_Types'Access,"Big_Number_Test18.");
      Register_Routine(T, Big_Number_Test_To_String'Access,"Big_Number_Test19.");
      Register_Routine(T, Big_Number_Test_Put'Access,"Big_Number_Test21.");
      Register_Routine(T, Big_Number_Test_Big_Div'Access,"Big_Number_Test22.");
      Register_Routine(T, Big_Number_Test_Short_Div'Access,"Big_Number_Test23.");   
   end Register_Tests;

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------ Name Big_Number Test ------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

   function Name(T : Big_Number_Test) return Test_String is
   begin
      return new String'("Big Number Utils Tests");
   end Name;
   
------------------------------------------------------------------------------------
------------------------------------ Start Tests -----------------------------------
------------------------------------------------------------------------------------
---------------------------------- Test Rotate Left --------------------------------
------------------------------------------------------------------------------------
	
   procedure Big_Number_Test_Rotate_Left(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions;
   begin
      P := To_Big_Unsigned("1");
      R := To_Big_Unsigned("2");
      
      for I in 0 .. 9 loop
	 Q := Rotate_Left(P,I);
	 Str := I'Img;
	 Z := To_Big_Unsigned(Str);
	 H := R**Z;
   	   	   Assert(Q = H, "Rotate Left failed.");
      end loop;
      
      for I in 10 .. 99 loop
	 Q := Rotate_Left(P,I);
	 Str1 := I'Img;
	 Z := To_Big_Unsigned(Str1);
	 H := R**Z;
	 Assert(Q = H, "Rotate Left failed.");
      end loop;
      
      for I in 100 .. 999 loop
	 Q := Rotate_Left(P,I);
	 Str2 := I'Img;
	 Z := To_Big_Unsigned(Str2);
	 H := R**Z;
	 Assert(Q = H, "Rotate Left failed.");
      end loop;
      
      for I in 4095 .. 4099 loop
	 Q := Rotate_Left(P,I);
	 Str3 := I'Img;
	 Z := To_Big_Unsigned(Str3);
	 if Z > 4095 then
	    Z := Z mod 4096;
	 end if;
	 H := R**Z;
	 Assert(Q = H, "Rotate Left failed.");
      end loop;
      
      P := Rotate_Left(X,62);
      Assert(P = X, "Rotate Left failed.");
      
      P := To_Big_Unsigned("0");
      P := Rotate_Left(P,1024);
      Assert(P = 0, "Rotate Left with 0 failed.");
      
      P := To_Big_Unsigned("2#101#");
      for I in 0 .. 9 loop
	 Q := Rotate_Left(P,I);
	 Str := I'Img;
	 Z := To_Big_Unsigned(Str);
	 J := I + 2;
	 if J > 9 and J < 100 then
	    Str1 := J'Img;
	    A := To_Big_Unsigned(Str1);
	 else
	    Str := J'Img;
	    A := To_Big_Unsigned(Str);
	 end if;
	 H := R**Z + R**A;
	 Assert(Q = H, "Rotate Left failed.");
      end loop;
      
      P := To_Big_Unsigned("898901428671845890751485156209189188587024255661245" &
	   "518110679385593027632367636900684873831268503994022500968762183888872480" &
	   "408402464461427550209974416449347020202398440764896477036896173666763434" &
	   "215651328488741484692011070882583075107296385075654018363574856412155075" &
	   "84680892845867804778380075015127199383552");

      Q := Rotate_Left(P, 4101);

      Z := To_Big_Unsigned("287648457174990685040475249986940540347847761811598" &
	   "565795417403389768842357643808219159626005921278087200310003898844439193" &
	   "730688788627656816067191813263791046464767501044766872651806775573364298" &
	   "949008425116397275101443542682426584034334843224209285876343954051889624" &
	   "2709788571067769752908162400484070380273664");

	   Assert(Q = Z, "Rotate Left failed.");
   end Big_Number_Test_Rotate_Left;

------------------------------------------------------------------------------------
------------------------------------- Test 11 --------------------------------------
------------------------------------------------------------------------------------
   
   procedure Big_Number_Test_Rotate_Right(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions;
   begin
      P := To_Big_Unsigned("2#10001010#");
      Assert(P = 138, "P is not equal to 138.");
      Q := Rotate_Right(P,5);
      Z := Shift_Right(P,5);
      Assert(Z = 4, "Something failed.");
      R := Shift_Left(P, 4091);
      H := To_Big_Unsigned("3263715254416101583411727220989451195562388278273074" &
	   "3137007296352623559624111170526525837872968673698152815834826226963687111" &
	   "6699433060502269761277453551649358111555169909374481362996916994911973258" &
	   "7718787049831957425996373117852330226045888576833179677524714705636575222" &
	   "7626523128706534827124305737438406458966843027555868310840800943445654393" &
	   "7368579197757334157195842638455945317491374958660692356779323612464153589" &
	   "4744493482607802294024412101998426484688090754215651303317734667713543282" &
	   "9719780377758423461561988011544122906725431150807412127869801773475666202" &
	   "9014490039234445624468878857745269561148278810817819939533097889253383041" &
	   "1985562773776944071357094367806882228653180243770859985890874755113810532" &
	   "1417972649500465848722983124462203543737860993570972088472940330758527633" &
	   "7434860890557173226104536582882271581685908121154063163426061152432149671" &
	   "3876925023165455234124447033036382428608801004314472018446612927895963571" &
	   "4263772826496874121930670805108538245320851658121868624877837483412555457" &
	   "0255537015583579893515680727834522849822864234627365069327053670741655276" &
	   "5352561000992053132627895677846481713703370037280639134318304184305150322" &
	   "2690184468790700420849678958538015359722862591274429313544877820118897135" &
	   "6375985684480");
      Assert(R = H, "Shift Left failed with 4091.");
      H := Z xor R;
      Assert(Q = H, "Rotate Right failed.");
      
	   P := To_Big_Unsigned("2#10001010#");
	   Assert(P = 138, "P is not equal to 138.");
	   Q := Rotate_Right(P,4);
	   Z := Shift_Right(P,4);
	   Assert(Z = 8, "Something failed.");
	   R := Shift_Left(P, 4092);
	   H := To_Big_Unsigned("6527430508832203166823454441978902391124776556546148" &
	   "6274014592705247119248222341053051675745937347396305631669652453927374223" &
	   "3398866121004539522554907103298716223110339818748962725993833989823946517" &
	   "5437574099663914851992746235704660452091777153666359355049429411273150445" &
	   "5253046257413069654248611474876812917933686055111736621681601886891308787" &
	   "4737158395514668314391685276911890634982749917321384713558647224928307178" &
	   "9488986965215604588048824203996852969376181508431302606635469335427086565" &
	   "9439560755516846923123976023088245813450862301614824255739603546951332405" &
	   "8028980078468891248937757715490539122296557621635639879066195778506766082" &
	   "3971125547553888142714188735613764457306360487541719971781749510227621064" &
	   "2835945299000931697445966248924407087475721987141944176945880661517055267" &
	   "4869721781114346452209073165764543163371816242308126326852122304864299342" &
	   "7753850046330910468248894066072764857217602008628944036893225855791927142" &
	   "8527545652993748243861341610217076490641703316243737249755674966825110914" &
	   "0511074031167159787031361455669045699645728469254730138654107341483310553" &
	   "0705122001984106265255791355692963427406740074561278268636608368610300644" &
	   "5380368937581400841699357917076030719445725182548858627089755640237794271" &
	   "2751971368960");
	   Assert(R = H, "Shift Left failed with 4092." );
	   H := Z xor R;
	   Assert(Q = H, "Rotate Right failed." );

	   P := To_Big_Unsigned("2#10001010#");
	   Assert(P = 138, "P is not equal to 138.");
	   Q := Rotate_Right(P,3);
	   Z := Shift_Right(P,3);
	   Assert(Z = 17, "Something failed.");
	   R := Shift_Left(P, 4093);
	   H := To_Big_Unsigned("2610972203532881266729381776791560956449910622618459" &
	   "4509605837082098847699288936421220670298374938958522252667860981570949689" &
	   "3359546448401815809021962841319486489244135927499585090397533595929578607" &
	   "0175029639865565940797098494281864180836710861466543742019771764509260178" &
	   "2101218502965227861699444589950725167173474422044694648672640754756523514" &
	   "9894863358205867325756674110764756253993099966928553885423458889971322871" &
	   "5795594786086241835219529681598741187750472603372521042654187734170834626" &
	   "3775824302206738769249590409235298325380344920645929702295841418780532962" &
	   "3211592031387556499575103086196215648918623048654255951626478311402706432" &
	   "9588450219021555257085675494245505782922544195016687988712699804091048425" &
	   "7134378119600372678978386499569762834990288794856777670778352264606822106" &
	   "9947888712445738580883629266305817265348726496923250530740848921945719737" &
	   "1101540018532364187299557626429105942887040803451577614757290342316770857" &
	   "1411018261197499297544536644086830596256681326497494899902269986730044365" &
	   "6204429612466863914812544582267618279858291387701892055461642936593324221" &
	   "2282048800793642506102316542277185370962696029824511307454643347444120257" &
	   "8152147575032560336679743166830412287778290073019543450835902256095117708" &
	   "5100788547584");
	   Assert(R = H, "Shift Left failed with 4093." );
	   H := Z xor R;
	   Assert(Q = H, "Rotate Right failed." );

   	   Q := To_Big_Unsigned("2#1#");
   	   P := Rotate_Right(Q,3);
	   Z := To_Big_Unsigned("1305486101766440633364690888395780478224955311309229" &
	   "7254802918541049423849644468210610335149187469479261126333930490785474844" &
	   "6679773224200907904510981420659743244622067963749792545198766797964789303" &
	   "5087514819932782970398549247140932090418355430733271871009885882254630089" &
	   "1050609251482613930849722294975362583586737211022347324336320377378261757" &
	   "4947431679102933662878337055382378126996549983464276942711729444985661435" &
	   "7897797393043120917609764840799370593875236301686260521327093867085417313" &
	   "1887912151103369384624795204617649162690172460322964851147920709390266481" &
	   "1605796015693778249787551543098107824459311524327127975813239155701353216" &
	   "4794225109510777628542837747122752891461272097508343994356349902045524212" &
	   "8567189059800186339489193249784881417495144397428388835389176132303411053" &
	   "4973944356222869290441814633152908632674363248461625265370424460972859868" &
	   "5550770009266182093649778813214552971443520401725788807378645171158385428" &
	   "5705509130598749648772268322043415298128340663248747449951134993365022182" &
	   "8102214806233431957406272291133809139929145693850946027730821468296662110" &
	   "6141024400396821253051158271138592685481348014912255653727321673722060128" &
	   "9076073787516280168339871583415206143889145036509771725417951128047558854" &
	   "2550394273792");
   	   Assert(Bit_Length(P) = 4094, "Rotate Right and Bit Length failed.");
   	   Assert(P = Z, "Rotate Right and Bit Length failed.");
	   
   	   Q := To_Big_Unsigned("2#1001#");
   	   P := Rotate_Right(Q,3);
	   Z := To_Big_Unsigned("1305486101766440633364690888395780478224955311309229" &
	   "7254802918541049423849644468210610335149187469479261126333930490785474844" &
	   "6679773224200907904510981420659743244622067963749792545198766797964789303" &
	   "5087514819932782970398549247140932090418355430733271871009885882254630089" &
	   "1050609251482613930849722294975362583586737211022347324336320377378261757" &
	   "4947431679102933662878337055382378126996549983464276942711729444985661435" &
	   "7897797393043120917609764840799370593875236301686260521327093867085417313" &
	   "1887912151103369384624795204617649162690172460322964851147920709390266481" &
	   "1605796015693778249787551543098107824459311524327127975813239155701353216" &
	   "4794225109510777628542837747122752891461272097508343994356349902045524212" &
	   "8567189059800186339489193249784881417495144397428388835389176132303411053" &
	   "4973944356222869290441814633152908632674363248461625265370424460972859868" &
	   "5550770009266182093649778813214552971443520401725788807378645171158385428" &
	   "5705509130598749648772268322043415298128340663248747449951134993365022182" &
	   "8102214806233431957406272291133809139929145693850946027730821468296662110" &
	   "6141024400396821253051158271138592685481348014912255653727321673722060128" &
	   "9076073787516280168339871583415206143889145036509771725417951128047558854" &
	   "2550394273793");
   	   Assert(Bit_Length(P) = 4094, "Rotate Right and Bit Length failed.");
   	   Assert(P = Z, "Rotate Right failed.");

	   P := Rotate_Right(X, 61);
	   Assert(P = Big_Unsigned_Last, "Rotate Right failed.");

	   P := To_Big_Unsigned("2#1010101#");
	   Q := Rotate_Right(P,8191);
	   Z := Shift_Left(P,1);
	   Assert(Q = Z and Q = 170, "Rotate Right failed.");
	   Assert(Bit_Length(Q) = 8, "Rotate Right failed.");

	   P := Y_1024 + 1;
	   Q := Rotate_Right(P,4097);
	   Z := To_Big_Unsigned("5221944407065762533458763553583121912899821245236918" &
	   "9019211674164197695398577872842441340596749877917044505335721963141899378" &
	   "6719092896803631618043925682638972978488271854999170180795067191859157214" &
	   "0350059279731131881594196988563728361673421722933087484039543529018520356" &
	   "4202437005930455723398889179901450334346948844089389297345281509513047029" &
	   "9789726716411734651513348221529512507986199933857107770846917779942645743" &
	   "1591189572172483670439059363197482375500945206745042085308375468341669252" &
	   "7551648604413477538499180818470596650760689841291859404591682837561065924" &
	   "6423184062775112999150206172392431297837246097308511903252956622805412865" &
	   "9176900438043110514171350988491011565845088390033375977425399608182096851" &
	   "4268756239200745357956772999139525669980577589713555341556704529213644213" &
	   "9895777424891477161767258532611634530697452993846501061481697843891439474" &
	   "2203080037064728374599115252858211885774081606903155229514580684633542613" &
	   "1287710833974537241615027233297329282398257364527853471308597860093879006" &
	   "2890425579172389033393099724592176495413261604798668518131597119610363762" &
	   "1934719490426752136532059466065468748155862656914437375334315539078993927" &
	   "3427439223760776200400848191828350109785895058036449198595790327432003233" &
	   "5013689163776");
	   Assert(Q = Z, "Rotate Right failed.");
	   Assert(Bit_Length(Q) = 4096, "Rotate Right failed.");

	   for I in 1 .. 4096 loop
	   	   P := Rotate_Right(Y_1024, I);
		   Q := Rotate_Right(Y_1024, 4096 + I);
		   Assert(P = Q, "Rotate Right in for loop failed.");
		   
		   P := To_Big_Unsigned("0");
		   Assert(Rotate_Right(P,I) = 0, "Rotate Right with 0 failed.");
	   end loop;

	   Z := Get_Random;
	   P := Rotate_Right(Z,100);
	   Q := Rotate_Right(Z,4196);
	   Assert(P = Q, "Rotate Right in for loop failed.");

   end Big_Number_Test_Rotate_Right;

------------------------------------------------------------------------------------
------------------------------------- Test Random --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_Random(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      for I in 1 .. 100 loop 
	 Q := Get_Random;
	 R := Get_Random;
	 Assert(Q /= R, "Get_Random failed.");
      end loop;
   end Big_Number_Test_Random;

------------------------------------------------------------------------------------
----------------------------- Test To_Bit_Length  ----------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_Bit_Length(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      P := To_Big_Unsigned("0");
      Assert(Bit_Length(P) = 0, "Bit_Length failed.");
      Assert(Bit_Length(X) = 4096, "Bit_Length failed.");
      Assert(Bit_Length(Y_1024) = 1025, "Bit_Length failed.");
      Assert(Bit_Length(Big_Unsigned_Last) = 4096, "Bit_Length failed.");
      
      P := X + 14; -- 13 = (1101)_2
      Q := X + 1;
      Assert(Bit_Length(Q) = 0, "Bit_Length failed.");
      Assert(Bit_Length(P) = 4, "Bit_Length failed."); --Wrap around
   end Big_Number_Test_Bit_Length;

------------------------------------------------------------------------------------
------------------------------------- Test LSB --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_LSB(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      Assert(Lowest_Set_Bit(X) = 1, "Lowest Set Bit failed.");
      Assert(Lowest_Set_Bit(X_851) = 257, "Lowest Set Bit failed.");

      P := To_Big_Unsigned("5221944407065762533458763553583121912899821245236918" &
	   "9019211674164197695398577872842441340596749877917044505335721963141899378" &
	   "6719092896803631618043925682638972978488271854999170180795067191859157214" &
	   "0350059279731131881594196988563728361673421722933087484039543529018520356" &
	   "4202437005930455723398889179901450334346948844089389297345281509513047029" &
	   "9789726716411734651513348221529512507986199933857107770846917779942645743" &
	   "1591189572172483670439059363197482375500945206745042085308375468341669252" &
	   "7551648604413477538499180818470596650760689841291859404591682837561065924" &
	   "6423184062775112999150206172392431297837246097308511903252956622805412865" &
	   "9176900438043110514171350988491011565845088390033375977425399608182096851" &
	   "4268756239200745357956772999139525669980577589713555341556704529213644213" &
	   "9895777424891477161767258532611634530697452993846501061481697843891439474" &
	   "2203080037064728374599115252858211885774081606903155229514580684633541714" &
	   "2822036522394998595089073288173661192513362652994989799804539973460088731" &
	   "2408859224933727829625089164535236559716582775403784110923285873186648442" &
	   "4564097601587285012204633084554370741925392059649022614909286694888240515" &
	   "6304295150065120673359486333660824575556580146039086901671804512190235417" &
	   "0201577095168");
      
      Assert(Lowest_Set_Bit(P) = 4096, "Lowest Set Bit failed.");     
      P := To_Big_Unsigned("24");
      Assert(Lowest_Set_Bit(P) = 4, "Lowest Set Bit failed.");
   end Big_Number_Test_LSB;

------------------------------------------------------------------------------------
------------------------------- Test Length_In_Bytes -------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_Length_In_Bytes(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      Assert(Length_In_Bytes(X) = 512, "First Length in Bytes failed.");
      Assert(Length_In_Bytes(Y_1024) = 129, "Second Length in Bytes failed.");
      P := To_Big_Unsigned("0");
      Assert(Length_In_Bytes(P) = 0, "Third Length in Bytes failed.");
      P := Y_1024 - 1;
      Assert(Length_In_Bytes(P) = 128, "Second Length in Bytes failed.");
   end Big_Number_Test_Length_In_Bytes;

------------------------------------------------------------------------------------
------------------------------------ Test Gcd --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_Gcd(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      Z := Y_1024 - 1;
      P := To_Big_Unsigned("1749371770012783641855406037645123465278605460138458" &
	   "764551345813409589134750");
      Q := To_Big_Unsigned("4445232346172534434950653775902724568357389684594867" &
	   "2547236455");
      
      Assert(Gcd(X,Y_1024) = 1, "Greatest Common Divisor failed.");
      Assert(Gcd(Y_1024,X) = 1, "Greatest Common Divisor failed.");
      Assert(Gcd(Z,X) = Z, "Greatest Common Divisor failed.");
      Assert(Gcd(X,Z) = Z, "Greatest Common Divisor failed.");
      Assert(Gcd(Y_1024,Z) = 1, "Greatest Common Divisor failed.");
      Assert(Gcd(X,P) = 5, "Greatest Common Divisor failed.");
      Assert(Gcd(X,Q) = 5, "Greatest Common Divisor failed.");
      Assert(Gcd(Y_1024,Q) = 1, "Greatest Common Divisor failed.");
      Assert(Gcd(Y_1024,P) = 2, "Greatest Common Divisor failed.");
      Assert(Gcd(P,Y_1024) = 2, "Greatest Common Divisor failed.");
      Assert(Gcd(Q,Y_1024) = 1, "Greatest Common Divisor failed.");
      Assert(Gcd(P,Q) = 5, "Greatest Common Divisor failed.");
      Assert(Gcd(Q,P) = 5, "Greatest Common Divisor failed.");
	   
      P:= To_Big_Unsigned("0");
      Q := To_Big_Unsigned("0");
      Assert(Gcd(P,Q) = 0, "Greatest Common Divisor failed.");
      Assert(Gcd(Q,P) = 0, "Greatest Common Divisor failed.");
      Assert(Gcd(X,P) = X, "Greatest Common Divisor failed.");
      Assert(Gcd(P,X) = X, "Greatest Common Divisor failed.");
      P:= To_Big_Unsigned("1");
      Q := To_Big_Unsigned("1");
      Assert(Gcd(Q,P) = 1, "Greatest Common Divisor failed.");
      Assert(Gcd(P,Q) = 1, "Greatest Common Divisor failed.");
      P:= To_Big_Unsigned("2");
      Q := To_Big_Unsigned("1");
      Assert(Gcd(Q,P) = 1, "Greatest Common Divisor failed.");
      Assert(Gcd(P,Q) = 1, "Greatest Common Divisor failed.");
   end Big_Number_Test_Gcd;

------------------------------------------------------------------------------------
-------------------------------- Test To_Bytes -------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_To_Bytes(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      B1 := (others => 255);
      B2 := (others => 255);
      B := To_Bytes(X);
      Assert(B = B2, "Convert Big_Unsigned to Bytes failed.");
      P := To_Big_Unsigned(B1);
      Assert(P = To_Big_Unsigned("18446744073709551615"), "Convert Big_Unsigned to Bytes failed."); 
      P := To_Big_Unsigned(B2);
      Assert(P = X, "Convert Bytes to Big_Unsigned failed.");
      
      B3 := To_Bytes(X_851);
      P := To_Big_Unsigned(B3);
      Assert(P = X_851, "To_Bytes failed.");
   end Big_Number_Test_To_Bytes;

------------------------------------------------------------------------------------
------------------------------- Test To_Mod_Types ----------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_To_Mod_Types(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      M1 := (others => 4294967295);
      M := To_Words(X);
      Assert(M = M1, "To_Mod_Types failed.");
      
      M2 := (32 => 1, others => 0);
      M3 := To_Words(Y_1024);
      Assert(M3 = M2, "To_Mod_Types failed.");
   end Big_Number_Test_To_Mod_Types;

------------------------------------------------------------------------------------
---------------------------------- Test To_String ----------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_To_String(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      S1 := To_String(X);
      
      S2 := "10443888814131525066" &
	"9175271071662438257996424904738378038423348328395390797155745684882681193499" &
	"7558340890106714439262837987573438185793607263236087851365277945956976543709" &
	"9983403615901343837183144280700118559462263763188393977127456723346843445866" &
	"1749680790870580370407128404874011860911446797778359802900668693897688178778" &
	"5946905630190260940599579453432823469303026696443059025015972399867714215541" &
	"6938355598852914863182379144344967340878118726394964751001890413490084170616" &
	"7509366833385055103297208826955076998361636941193301521379682583718809183365" &
	"6751221318492846368125550225998300412344784862595674492194617023806505913245" &
	"6108257318353800876086221028342701976982023131690176780066751954850799216364" &
	"1937028537512478401490715913545998279051339961155179427110683113409058427288" &
	"4279791554849782954323534517065223269061394905987693002122963395687782878948" &
	"4406160074129456749198230505716423771548163213806310459029161369267083428564" &
	"4073044789997190178146576347322385026725305989979599609079946920177462481771" &
	"8449867455659250178329070473119433165550807568221846571746373296884912819520" &
	"3174570024409266169108741483850784119298045229818573389776481031260859030013" &
	"02413467189726673216491511131602920781738033436090243804708340403154190335";
   	   
      Assert(S1 = S2, "To_String failed.");
      
      S4 := "17976931348623159077293051907890247336179769789423065727343008115773" &
	"26758055009631327084773224075360211201138798713933576587897688144166224928" &
	"47430639474124377767893424865485276302219601246094119453082952085005768838" &
	"15068234246288147391311054082723716335051068458629823994724593847971630483" &
	"5356329624224137216";
      S3 := To_String(Y_1024);
      
      Assert(S3 = S4, "To_String failed.");

   end Big_Number_Test_To_String;

------------------------------------------------------------------------------------
------------------------------------- Test Put--------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_Put(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
      use Ada.Text_IO;
      Stdout : constant File_Type := Standard_Output;
      Put_File_Name : constant String := "big_number_put_test.txt";
      Result : constant Crypto.Types.W_Block160 := (16#1196_9bec#, 16#4268_a279#, 16#e135_07b4#, 16#486e_cf82#, 16#e3e9_f550#);
      Put_File : File_Type; 
   begin
      Create(Put_File, Out_File, Put_File_Name); 
      Set_Output(Put_File);
      Put(X, 10);
      Put(X, 2);
      Put_Line(Y_1024, 10);
      Put_Line(Y_1024, 2);
      Set_Output(Stdout);
      Close(Put_File);
      Assert( Crypto.Symmetric.Hashfunction_SHA1.F_Hash(Put_File_Name) = Result, "Put failed");
   end Big_Number_Test_Put;

------------------------------------------------------------------------------------
------------------------------------- Big_Div --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_Big_Div(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      Big_Div(X, Y_1024, P, Q);
      R := To_Big_Unsigned("5809605995369958062859502533304574370686975176362895236" &
	   "6614861522872037309971102257373360445331184072513261577549805174439905295945" &
	   "4004712166288567218703240103211163970644049884404985098905162720024476580704" &
	   "1812394729680540024104827976584369381522292361208779044769892743225751738076" &
	   "9795688113095791255113330932435195537848163063815801618602002474925684481502" &
	   "4251530444957718760413642873858099017255157393414625583036640591500086964373" &
	   "2053218566832545291107903722831634138599586406690325959725187447169059540805" &
	   "0123102096390117507487600170953607342349457574162729948560133086169585299583" &
	   "0467763701918159408852834506128586389827176345729488354663887955431161544644" &
	   "6330199254382340016292057090751175533888161918987295591531536698701292267685" &
	   "4655174379157908231548446347802601028917180324953960750418994855138111269773" &
	   "0747896907485704371071615012131592202455675924123901315291971095646840637944" &
	   "2914941614357107914462567329693695");
      Z := To_Big_Unsigned("1797693134862315907729305190789024733617976978942306572" &
	   "7343008115773267580550096313270847732240753602112011387987139335765878976881" &
	   "4416622492847430639474124377767893424865485276302219601246094119453082952085" &
	   "0057688381506823424628814739131105408272371633505106845862982399472459384797" &
	   "16304835356329624224137215");
   	   Assert(P = R and Q = Z, "Big_Div failed.");
   end Big_Number_Test_Big_Div;

------------------------------------------------------------------------------------
------------------------------------- Short_Div --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test_Short_Div(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
      M4 := 4294967295;
      Short_Div(X, M4, P, M5);
      Z := To_Big_Unsigned("2431657355409856518341084855028271833627464790852112368" &
	   "3765640485137941148666126381966473435858783607824657643043572066082230166043" &
	   "3433779444701473064736172326536185310745188885160437556808850697995377869776" &
	   "2927264330469923631194369018669522475575957783417553836818457243419006616949" &
	   "3593651869188065564280546796083970688018613815908700423781471415824912185355" &
	   "0529312399908055417454807976568704981382563434760656376892462050264444329542" &
	   "6974402310645526056561483179696734843382957805894849894429831676025066334690" &
	   "1774635501896947860549350838239341979288732889439114875643497200372185797992" &
	   "4930903312639933499701914965060637536995636383706580792505803847361504593295" &
	   "7909059731662095643516827281184407532575680230611337227386302849971143866376" &
	   "7299150053517504008633128162948923788554349860108884712309650393612998750978" &
	   "1273292537606550739083791648683039128694562181993847509768970155347963282308" &
	   "8015659316867117252176692388356611089995368010009258922428608308560992718456" &
	   "2350737525227092470579556978949583009984676725401133915972655365015372472892" &
	   "4984935785924732302704617753529346215783074421991015632778389031748933277595" &
	   "9891923980254330059986284722398767190149936667834835577422520260450857758908" &
	   "22409168877289493727031590913");
      Assert(P = Z and M5 = 0, "Short_Div failed.");
   end Big_Number_Test_Short_Div;

------------------------------------------------------------------------------------

end Test.Big_Numbers_Utils;
