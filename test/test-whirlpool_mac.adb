with AUnit.Assertions; 
with Ada.Text_IO;
with Crypto.Symmetric.MAC.HMAC_Whirlpool;
with Crypto.Types;

package body Test.Whirlpool_MAC is
  use Crypto.Types;
  
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
-------------------------------- Type - Declaration --------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
	
	package DIO is new Ada.Text_IO.Modular_IO (DWord);
	use DIO;
    
    Key1: DW_Block512 := (16#00_11_22_33_44_55_66_77#,
                          16#88_99_AA_BB_CC_DD_EE_FF#,
                          16#01_23_45_67_89_AB_CD_EF#,
                          16#00_11_22_33_44_55_66_77#,
                          16#88_99_AA_BB_CC_DD_EE_FF#,
                          16#01_23_45_67_89_AB_CD_EF#,
                          16#00_11_22_33_44_55_66_77#,
                          16#88_99_AA_BB_CC_DD_EE_FF#);
    
    Message1: DW_Block512 := (0 => 16#61_62_63_64_65_66_67_68#,
                              1 => 16#69_6A_6B_6C_6D_6E_6F_70#,
                              2 => 16#71_72_73_74_75_76_77_78#,
                              3 => 16#79_7A_00_00_00_00_00_00#,
                              others => 0);
    
    Temp: DW_Block512 :=
       (
        16#73A6D2A42B1FE6DD#, 16#52C067B1167C361B#,
        16#EF362BA8CC1C3E2D#, 16#2A529D8B9A7EE5AC#,
        16#5E6AC7908EE432C3#, 16#E140041DB35D9ED9#,
        16#445BEB2C2F1C348B#, 16#886EA61D535B7C75#
       );
    
    Tag: DW_Block512;

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
--------------------------- Register Whirlpool MAC Test 1 --------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
	
	procedure Register_Tests(T : in out HMAC_Test) is
		use Test_Cases.Registration;
	begin
		Register_Routine(T, Whirlpool_MAC_Test1'Access,"Whirlpool_MAc_Test1.");
	end Register_Tests;

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------ Name Whirlpool MAC Test -----------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

	function Name(T : HMAC_Test) return Test_String is
	begin
		return new String'("HMAC Test");
	end Name;

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------ Start Tests -----------------------------------
------------------------------------------------------------------------------------
-------------------------------------- Test 1 --------------------------------------
------------------------------------------------------------------------------------

   procedure Whirlpool_MAC_Test1(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
      use Crypto.Symmetric.MAC.HMAC_Whirlpool;

      Context : Crypto.Symmetric.Mac.Hmac_Whirlpool.HMAC_Context;
      
   begin

   	   Context.Init(Key1);
   	   Context.Final_Sign(Message1, 26, Tag);

       Assert((Tag = Temp) or (Context.Final_Verify(Message1, 26, Tag)), "Final Signature with Whirlpool MAC failed.");

   end Whirlpool_MAC_Test1;

------------------------------------------------------------------------------------

end Test.Whirlpool_MAC;
